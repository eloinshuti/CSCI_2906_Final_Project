package application;

//import com.itextpdf.text.Document;
//import com.itextpdf.text.DocumentException;
//import com.itextpdf.text.PageSize;
//import com.itextpdf.text.Paragraph;
//import com.itextpdf.text.pdf.PdfWriter;
import java.io.*;

import java.net.ServerSocket;
import java.net.Socket;
import java.util.Date;
import javafx.application.*;
import javafx.collections.FXCollections;
import javafx.event.*;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.*;

public class ResumeViewer extends Application {

    private TextArea resumeArea;
    private TextArea coverLetterArea;
    private TextArea ta;
    private Button downloadTextButton;
    private Button downloadPdfButton;
    private TabPane tabPane;
    private String[] detailsSelection = {"Resume", "Cover Letter", "Skills", "Experience", "Experience",
    "Awards", "Download"};
    private static final int PORT = 4281;
    
    public static void main(String[] args) {
        launch(args);
    }

    public void start(Stage primaryStage) {
        tabPane = new TabPane();
        Tab resumeTab = new Tab("Resume");
        resumeTab.setClosable(false);
        Tab coverLetterTab = new Tab("Cover Letter");
        coverLetterTab.setClosable(false);
        
        resumeArea = new TextArea();
        resumeArea.setEditable(false);
        resumeArea.setWrapText(true);
        resumeArea.setPrefHeight(600);
        resumeArea.setMinWidth(500);
        
        
        downloadTextButton = new Button("Download as Text ");
        //downloadTextButton.setOnAction(this::handleDownloadText);

        //downloadPdfButton = new Button("Download as PDF");
        //downloadPdfButton.setOnAction(this::handleDownloadPdf);
        
        ListView<String> lv = new ListView<>
        (FXCollections.observableArrayList(detailsSelection));
        lv.setPrefSize(400, 400);
        lv.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
        
        SplitPane content = new SplitPane();----------------------------------------------implement splitpane on all tabs
        content.setPadding(new Insets(10, 10, 10, 10));
        content.setOrientation(Orientation.HORIZONTAL);
        content.getItems().addAll(lv,resumeArea);
        lv.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal != oldVal) {
            	// perform action for selected item
            	if(newVal == "Download" )
            		handleDownloadText(newVal);
            	else if(newVal == "Cover Letter")
            		tabPane.getSelectionModel().select(coverLetterTab);
            	else if(newVal == "Resume")
            		tabPane.getSelectionModel().select(resumeTab);
            	else
            		openTab(lv.getSelectionModel().getSelectedItem());
            }
        });
        //lv.getSelectionModel().setOnAction(e -> openTab("EDUCATION"));
        
        VBox set = new VBox(resumeArea,downloadTextButton);//, downloadPdfButton);
        
        //HBox root = new HBox(10, set, buttonsBox);       
        //root.setPadding(new Insets(10));
        //root.setPrefWidth(600);
        //root.setPrefHeight(600);
        resumeTab.setContent(content);
        
        VBox set2 = new VBox();
        //set2.getChildren().add(CoverLetterArea);
        //CoverLetterArea.setPrefHeight(600);
        
        coverLetterArea = new TextArea();
        coverLetterArea.setWrapText(true);
        coverLetterArea.setEditable(false);
        coverLetterArea.setPrefHeight(600);
        VBox coverLetterContent = new VBox();
        coverLetterContent.setPadding(new Insets(10));
        coverLetterContent.setSpacing(10);
        coverLetterContent.getChildren().addAll(coverLetterArea);
        coverLetterTab.setContent(coverLetterContent);
        tabPane.getTabs().addAll(resumeTab, coverLetterTab);
        
        
        Scene scene = new Scene(tabPane, 600, 650);
        primaryStage.setTitle("Resume Viewer");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        // set up a socket server to receive messages
        new Thread(() -> {
        	try (ServerSocket serverSocket = new ServerSocket(PORT)) {
        		while (true) {
        			Socket socket = serverSocket.accept();
        			new Thread(() -> {
        				try {
        					InputStream inputStream = socket.getInputStream();
        					DataInputStream dataInputStream = new DataInputStream(inputStream);
        					String[][] data = new String[15][3];
        					for (int i = 0; i < 15;i++) {
        						data[i][0] = dataInputStream.readUTF();
        						data[i][1] = data[i][0].substring(0,1);//tab
        						data[i][2] = data[i][0].substring(1);//message                                 
        					}
        					int tab1 = 0; int tab2 = 0;
        					boolean allMessagesReceived = true;
        					for (int i = 0; i < data.length; i++) {
        						
        						if (data[i][2] != null) {
        							if (Integer.parseInt(data[i][1]) == 1) {
        								tab1=tab1+1;
        							}
        							if (Integer.parseInt(data[i][1]) == 2) {
        								tab2++;
        							}
        							
        								allMessagesReceived = true;
        								if(!allMessagesReceived)
        								break;
        							
        						}
        					}
                             
        					
        					if (tab1 == 15) {
        						Platform.runLater(() -> {
        							resumeArea.appendText(
        									data[0][2] + " " + data[1][2] + "\n" + data[2][2] + "\n" + data[3][2] + ", " + 
        											data[4][2] + " " + data[5][2] + "\n" + data[6][2] +"\n" + data[7][2] + "\n\n" + "SKILLS" + 
        											"\n" + data[8][2] + "\n\n" + "EXPERIENCE" + "\n" + data[9][2] + "\n\n" + 
        											"EDUCATION" + "\n" + data[10][2] + "\n\n" + data[11][2] + "\n" + data[12][2]
        									);
        						});
        					} 
        					else if(tab2 == 15){
        						Platform.runLater(() -> {
        							coverLetterArea.appendText(
        									data[0][2] + " " + data[1][2] + "\n" + data[7][2]+ " " + data[6][2] + " " + 
        												data[3][2] + " " + data[4][2] + " " + data[5][2]+ "\n\n" + data[9][2] + "\n\n" + 
        												data[10][2] + "\n" + data[11][2] + "\n" + data[12][2] + "\n" + data[2][2] + 
        												"\n" + data[13][2] + "\n" + data[14][2] + "\n\n" + data[8][2]
        									);
        						});		
        					}
        					tab1 = 0; tab2 = 0;
                 
        				} catch (IOException e) {
        					e.printStackTrace();
        				}
        			}).start();
        		}
        	} catch (IOException e) {
        		e.printStackTrace();
        	}
	}).start();
    }
    
    private void handleDownloadText(String download) {
        try {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Save Resume as Text");
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Text Files", "*.txt"));
            File file = fileChooser.showSaveDialog(null);

            if (file != null) {
                FileWriter writer = new FileWriter(file);
                writer.write(resumeArea.getText());
                writer.close();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    // method to open a unique tab for a given button text
    private void openTab(String buttonText) {
        // check if a tab for this button already exists
        for (Tab tab : tabPane.getTabs()) {
            if (tab.getText().equals(buttonText)) {
                // select the existing tab and return
                tabPane.getSelectionModel().select(tab);
                return;
            }
            if (tab.getText().equals("AWARDS")||tab.getText().equals("PROJECTS")||tab.getText().equals("EXTRACURRICULAR")) {
                // select the existing tab and return
                tabPane.getSelectionModel().select(tab);
                return;
            }
        }
        // create a new tab and add it to the tab pane
        Tab newTab = new Tab(buttonText);
        StackPane tabContent = new StackPane();
        tabContent.getChildren().add(new Button("This is tab content for " + buttonText));
        
        // Details tab
        VBox detailsContent = new VBox();
        detailsContent.setPadding(new Insets(10));
        detailsContent.setSpacing(10);
        TextField thinTextField = new TextField();
        thinTextField.setPromptText("Title Text Field");
        TextArea largeTextArea = new TextArea();
        largeTextArea.setPromptText("Description Text Field");
        largeTextArea.setPrefRowCount(100);
        largeTextArea.setWrapText(true);
        Button uploadButton = new Button("Upload");

        detailsContent.getChildren().addAll(thinTextField, largeTextArea, uploadButton);
        newTab.setContent(detailsContent);
        
        //newTab.setContent(tabContent);
        tabPane.getTabs().add(newTab);
        tabPane.getSelectionModel().select(newTab);
    }
}

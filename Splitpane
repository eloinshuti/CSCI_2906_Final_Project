package application;

//import com.itextpdf.text.Document;
//import com.itextpdf.text.DocumentException;
//import com.itextpdf.text.PageSize;
//import com.itextpdf.text.Paragraph;
//import com.itextpdf.text.pdf.PdfWriter;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Date;
import javafx.application.*;
import javafx.collections.FXCollections;
import javafx.event.*;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.*;

public class ResumeViewer extends Application {

    private TextArea resumeArea;
    private TextArea coverLetterArea;
    private TextArea ta;
    private Button downloadTextButton;
    private Button downloadPdfButton;
    private TabPane tabPane;
    private String[] detailsSelection = {"Resume","Skills", "Experience", "Experience",
    	    "Awards"};
    public static void main(String[] args) {
        launch(args);
    }

    public void start(Stage primaryStage) {
        tabPane = new TabPane();
        Tab resumeTab = new Tab("Resume");
        resumeTab.setClosable(false);
        Tab coverLetterTab = new Tab("Cover Letter");
        coverLetterTab.setClosable(false);
        
        resumeArea = new TextArea();
        resumeArea.setEditable(false);
        resumeArea.setWrapText(true);
        resumeArea.setPrefHeight(600);
        resumeArea.setMinWidth(500);
        downloadTextButton = new Button("Download as Text ");
        downloadTextButton.setOnAction(this::handleDownloadText);
        FlowPane flowPane = new FlowPane();
        //downloadPdfButton = new Button("Download as PDF");
        //downloadPdfButton.setOnAction(this::handleDownloadPdf);
        ListView<String> lv = new ListView<>
        (FXCollections.observableArrayList(detailsSelection));
        lv.setPrefSize(400, 400);
        lv.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
      
        Button educationButton = new Button("Education");
        Button experienceButton = new Button("Experience");
        Button skillsButton = new Button("Skills");

        VBox buttonsBox = new VBox(10, educationButton, experienceButton, skillsButton);
        buttonsBox.setPadding(new Insets(10));
        buttonsBox.setPrefWidth(120);

        SplitPane content = new SplitPane();
        content.setPadding(new Insets(10, 10, 10, 10));
        content.setOrientation(Orientation.HORIZONTAL);
        content.getItems().addAll(lv,resumeArea);
        flowPane.getChildren().addAll(content);
        VBox set = new VBox(resumeArea,downloadTextButton);//, downloadPdfButton);
        
        HBox root = new HBox(10, content, buttonsBox);       
        root.setPadding(new Insets(10));
        root.setPrefWidth(600);
        root.setPrefHeight(600);
        resumeTab.setContent(content);
        
        VBox set2 = new VBox();
        //set2.getChildren().add(CoverLetterArea);
        //CoverLetterArea.setPrefHeight(600);
        
        coverLetterArea = new TextArea();
        coverLetterArea.setWrapText(true);
        VBox coverLetterContent = new VBox();
        coverLetterContent.setPadding(new Insets(10));
        coverLetterContent.setSpacing(10);
        coverLetterContent.getChildren().addAll(coverLetterArea);
        coverLetterTab.setContent(coverLetterContent);
        tabPane.getTabs().addAll(resumeTab, coverLetterTab);
        

        
        Scene scene = new Scene(tabPane, 650, 750);
        primaryStage.setTitle("Resume Viewer");
        primaryStage.setScene(scene);
        primaryStage.show();
    
    
	  new Thread(() -> {
		  try {
			  // Create a server socket
			  ServerSocket serverSocket = new ServerSocket(8820);
			  
			  //Platform.runLater(() ->
			  //ta.appendText("LibraryServer started at " + new Date() + '\n'));
			  // Listen for a connection request
			  Socket socket = serverSocket.accept();
			  // Create data input and output streams
			  DataInputStream inputFromClient = new DataInputStream(
					  socket.getInputStream());
			  DataOutputStream outputToClient = new DataOutputStream(
					  socket.getOutputStream());

			  while (true) {
				  String clientFirstName = inputFromClient.readUTF();
				  String clientLastName = inputFromClient.readUTF();
				  String clientAddress = inputFromClient.readUTF();
				  String clientCity = inputFromClient.readUTF();
				  String clientState = inputFromClient.readUTF();
				  String clientZipCode = inputFromClient.readUTF();
				  String clientPhoneNumber = inputFromClient.readUTF();
				  String clientEmail = inputFromClient.readUTF();
				  String clientSkills = inputFromClient.readUTF();
				  String clientExperience = inputFromClient.readUTF();
				  String clientEducation = inputFromClient.readUTF();
				  String client4thSection = inputFromClient.readUTF();
				  String clientOther = inputFromClient.readUTF();
				  
				  String cclientFirstName = inputFromClient.readUTF();
				  String cclientLastName = inputFromClient.readUTF();
				  String cclientCity = inputFromClient.readUTF();
				  String cclientState = inputFromClient.readUTF();
				  String cclientZipCode = inputFromClient.readUTF();
				  String cclientPhoneNumber = inputFromClient.readUTF();
				  String cclientEmail = inputFromClient.readUTF();
				  String cclientCoverLetter = inputFromClient.readUTF();
				  String cclientDate = inputFromClient.readUTF();
				  String employerName = inputFromClient.readUTF();
				  String employerPosition = inputFromClient.readUTF();
				  String employerCompany = inputFromClient.readUTF();
				  String address = inputFromClient.readUTF();
				  String phoneNumber = inputFromClient.readUTF();
				  String email= inputFromClient.readUTF();
				  
				  
				 
				  Platform.runLater(() -> {
					  resumeArea.clear();
					  resumeArea.appendText(
							  clientFirstName + " " + clientLastName + "\n" + clientAddress + "\n" +
					  clientCity + ", " + clientState + clientZipCode + "\n" + clientPhoneNumber +"\n" + 
									  clientEmail + "\n\n" + 
					  "SKILLS" + "\n" + clientSkills + "\n\n" + "EXPERIENCE" + "\n" + clientExperience + "\n\n" +
					  "EDUCATION" + "\n" + clientEducation + "\n\n" + client4thSection + "\n" + clientOther
							  );
					  	
					  coverLetterArea.clear();
					  coverLetterArea.appendText(cclientFirstName + " " + cclientLastName + "\n" + cclientEmail
							  + " " + cclientPhoneNumber + " " + cclientCity + " " + cclientState + " " + cclientZipCode
							  + "\n\n" + cclientDate + "\n\n" + employerName + "\n" + employerPosition + "\n" + 
							  employerCompany + "\n" + address + "\n" + phoneNumber + "\n" + email + "\n\n" + cclientCoverLetter
							  );
				  });
			  }
		  }
		  catch(IOException ex) {
			  ex.printStackTrace();
		  }
	  }).start();}

    private void handleDownloadText(ActionEvent event) {
        try {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Save Resume as Text");
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Text Files", "*.txt"));
            File file = fileChooser.showSaveDialog(null);

            if (file != null) {
                FileWriter writer = new FileWriter(file);
                writer.write(resumeArea.getText());
                writer.close();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    //private void handleDownloadPdf(ActionEvent event) {
    //   try {
    //        FileChooser fileChooser = new FileChooser();
    //        fileChooser.setTitle("Save Resume as PDF");
    //        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("PDF Files", "*.pdf"));
    //        File file = fileChooser.showSaveDialog(null);

    //        if (file != null) {
    //            Document document = new Document(PageSize.A4);
    //            PdfWriter.getInstance(document, new FileOutputStream(file));
    //            document.open();
    //            document.add(new Paragraph(resumeArea.getText()));
    //            document.close();
    //        }
    //    } catch (IOException | DocumentException ex) {
    //        ex.printStackTrace();
    //    }
    //}

}
